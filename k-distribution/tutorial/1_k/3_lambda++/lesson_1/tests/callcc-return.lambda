// This program shows how callcc can implement return.

letrec f x = callcc (lambda return . (
  f (if (x <= 0) then ((return 1) / 0) else 2)
))
in (f -3)

// The above should evaluate to 1, in spite of the recursive call to f
// and of the division by zero!  As soon as 1 is passed to return, the
// computation jumps back in time to where callcc was defined!
// Change -3 to 3 and the program will loop forever.
